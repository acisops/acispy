#!/usr/bin/env python

from __future__ import print_function
import argparse
from acis import LoadReview
from acis.utils import get_time
from astropy.time import TimezoneInfo
import astropy.units as u
import numpy as np
from six import string_types

time_zones = {"EST":-5,"CST":-6,"MST":-7,"PST":-8,
              "EDT":-4,"CDT":-5,"MDT":-6,"PDT":-7}

parser = argparse.ArgumentParser()
parser.add_argument("load_review", type=str)
parser.add_argument("--start_time", type=str)
parser.add_argument("--end_time", type=str)
parser.add_argument("--time_zone", default=0)
args = parser.parse_args()

lr = LoadReview(args.load_review)

comm_begins = lr.get_times_for_event("in_comm", True)
comm_ends = lr.get_times_for_event("in_comm", False)

if args.start_time is None:
    start_time = 0.0
else:
    start_time = get_time(args.start_time).decimalyear

if args.end_time is None:
    end_time = 9999.0
else:
    end_time = get_time(args.end_time).decimalyear

begin_idxs = np.logical_and(comm_begins.decimalyear >= start_time,
                            comm_begins.decimalyear <= end_time)
end_idxs = np.logical_and(comm_ends.decimalyear >= start_time,
                          comm_ends.decimalyear <= end_time)

cbs = comm_begins[begin_idxs]
ces = comm_ends[end_idxs]

if isinstance(args.time_zone, string_types):
    time_zone = time_zones[args.time_zone.upper()]
else:
    time_zone = args.time_zone
tzi = TimezoneInfo(utc_offset=time_zone*u.hour)

cb_list = list(cbs.to_datetime(timezone=tzi))
ce_list = list(ces.to_datetime(timezone=tzi))

if cbs[0] > ces[0]:
    cb_list.insert(0, "-------------------")

if len(cbs) != len(ces):
    ce_list.append("--------------------------")

print("Comm Times for load %s (%d UTC):" % (lr, time_zone))
print("===========================================")
print("Comm Begins             Comm Ends")
print("===========================================")
for cb, ce in zip(cb_list, ce_list):
    if isinstance(cb, string_types):
        b = cb
    else:
        b = cb.strftime("%Y-%m-%d %H:%M:%S")
    if isinstance(ce, string_types):
        e = ce
    else:
        e = ce.strftime("%Y-%m-%d %H:%M:%S")
    print("%s\t%s" % (b, e))