#!/usr/bin/env python

from datetime import datetime, timedelta
import os
import matplotlib
matplotlib.use("agg")
import acispy
import Ska.Numpy
import matplotlib.pyplot as plt
from Chandra.Time import date2secs, secs2date, DateTime
import argparse
from kadi import events, commands
import numpy as np
import Ska.ParseCM

lr_web_css = [
    "commline {",
    "    background-color: #26DDCC;",
    "}\n",
    "obsidline {",
    "    background-color: pink;",
    "}\n",
    "padtime {",
    "    background-color: yellow;",
    "}\n",
    "errline {",
    "    background-color: #E0E0E0;",
    "    color: firebrick;",
    "}\n",
    "mechline {",
    "    background-color: orange;",
    "}"
]

load_root = "/data/acis/LoadReviews"
review_file = "ACIS-LoadReview.txt"

plot_limits = {"fptemp_11": (-120.0, -110.0),
               "1deamzt": (5.0, 42.0),
               "1dpamzt": (5.0, 42.0),
               "1pdeaat": (15.0, 63.0),
               "tmp_fep1_mong": (-1.0, 55.0),
               "tmp_fep1_actel": (-1.0, 54.0),
               "tmp_bep_pcb": (5.0, 50.0)}

planning_limits = {"1deamzt": 35.5,
                   "1dpamzt": 36.5,
                   "1pdeaat": 52.5,
                   "tmp_fep1_mong": 47.0,
                   "tmp_fep1_actel": 46.0,
                   "tmp_bep_pcb": 42.0}
yellow_limits = {"1deamzt": 37.5,
                 "1dpamzt": 38.5,
                 "1pdeaat": 57.0,
                 "tmp_fep1_mong": 49.0,
                 "tmp_fep1_actel": 48.0,
                 "tmp_bep_pcb": 44.0}
red_limits = {"1deamzt": 40.5,
              "1dpamzt": 40.5,
              "1pdeaat": 62.0,
              "tmp_fep1_mong": 54.0,
              "tmp_fep1_actel": 53.0,
              "tmp_bep_pcb": 49.0}

low_planning_limits = {"tmp_fep1_mong": 2.0,
                       "tmp_fep1_actel": 2.0,
                       "tmp_bep_pcb": 8.5}
low_yellow_limits = {"tmp_fep1_mong": 0.0,
                     "tmp_fep1_actel": 0.0,
                     "tmp_bep_pcb": 6.5}
low_red_limits = {"tmp_fep1_mong": -10.0,
                  "tmp_fep1_actel": -10.0,
                  "tmp_bep_pcb": -10.0}

fp_limits = {"acis_i": -114.0,
             "acis_s": -112.0,
             "fp_sens": -118.7}


def get_instr(simpos):
    if 104839 >= simpos >= 82109:
        instr = 'ACIS-I'
    elif 82108 >= simpos >= 70736:
        instr = 'ACIS-S'
    elif -20000 >= simpos >= -86147:
        instr = 'HRC-I'
    elif -86148 >= simpos >= -104362:
        instr = 'HRC-S'
    return instr


def find_the_load(now_time_utc):

    t = DateTime(now_time_utc).secs

    ls = events.load_segments.filter(start=t, stop=t+300.0)

    if len(ls) > 0:
        return ls[0].load_name
    else:
        return None


def process_commands(now_time_utc, now_time_local, cmds, comms):

    now_time = DateTime(now_time_utc).secs

    obsid_link = "https://icxc.harvard.edu/cgi-bin/mp/target_param.cgi?"

    outlines = []

    find_time = True

    in_science = False

    duration = None

    for cmd in cmds:

        the_time = date2secs(cmd["date"])

        if the_time > now_time and find_time:
            new_line = '<a name="now"></a>NOW: %s (%s)' % (now_time_utc.strftime("%Y:%j:%H:%M:%S"),
                                                           now_time_local.strftime("%D %H:%M:%S"))
            new_line += ' ' * (100 - len(new_line))
            new_line = '<font style="background-color:#5AC831"><b>%s</b></font>\n' % new_line
            outlines.append(new_line)
            find_time = False

        if cmd["type"] == "COMMAND_SW":
            if "OORM" not in cmd["params"]["msid"] and "ETG" not in cmd["params"]["msid"]:
                continue
        if cmd["type"] == "COMMAND_HW" and "CSELFMT" not in cmd["params"]:
            continue
        if cmd["type"].startswith("MP_") and not cmd["type"].endswith("OBSID"):
            continue
        if cmd["type"] == "ORBPOINT":
            if "EF100" not in cmd["params"]["event_type"] and \
               "GEE" not in cmd["params"]["event_type"]:
                continue

        highlight = None
        param = None

        if cmd["type"] == "ACISPKT":
            param = "\t%s" % cmd["tlmsid"]
            if cmd["tlmsid"].startswith("XCZ") or cmd["tlmsid"].startswith("XTZ"):
                in_science = True
                duration = the_time
            if cmd["tlmsid"].startswith("AA000") and in_science:
                in_science = False
                duration -= the_time
        elif cmd["type"] == "SIMTRANS":
            simpos = int(cmd["params"]['pos'])
            instr = get_instr(simpos)
            param = "%d  (%s)" % (simpos, instr)
            highlight = "<mechline>%s</mechline>"
        elif cmd["type"] == "COMMAND_SW" and "ETG" in cmd["params"]["msid"]:
            param = cmd["params"]["msid"]
            highlight = "<mechline>%s</mechline>"
        elif cmd["type"] == "COMMAND_SW" and "OORM" in cmd["params"]["msid"]:
            # Assuming that this is radmon commanding
            param = cmd["params"]['msid']
            highlight = "<padtime>%s</padtime>"
        elif cmd["type"] == "COMMAND_HW":
            # Assuming that this is a format change
            param = cmd["tlsmid"]
        elif cmd["type"] == "MP_OBSID":
            param = cmd["params"]['id']
            highlight = "<obsidline>%s</obsidline>"
        elif cmd["type"] == "ORBPOINT":
            param = cmd["event_type"]

        line = "%s\t%s\t%s" % (cmd["date"], cmd["type"], param)

        if highlight is not None:
            # Pad lines so highlighting happens across the page
            if len(line) < 74:
                line += ' ' * (74 - len(line))
            line = highlight % line

        if cmd["type"] == "MP_OBSID":
            if param < 40000:
                line = line.replace(str(param),
                                    "<a href=\"%s%s\"><font color=\"blue\">%s</font></a>" % (obsid_link, param, param))

        outlines.append(line)
        outlines.append(" ")

        if duration is not None and not in_science:
            line = "ACIS integration time is %.2f ks." % (-duration*1.0e-3)
            outlines.append(line)
            outlines.append(" ")
            duration = None

    outlines += ["</pre>", "</body>"]

    return outlines


parser = argparse.ArgumentParser(description='Run script for the "ACIS Current Load Real-Time" page.')
parser.add_argument("--page_path", type=str, default="/data/wdocs/jzuhone/current_acis_load.html",
                    help='The file to write the page to.')
args = parser.parse_args()

outfile = os.path.abspath(args.page_path)
outdir = os.path.dirname(outfile)
cssfile = os.path.join(outdir, "lr_web.css")

find_load = True
lr = None
dea_tl_data = None
last_tl_ts = 0.0
last_dea_tl_ts = 0.0
load_name = ""
old_load_name = ""

while True:

    # Find the current time
    now_time_utc = datetime.utcnow()
    now_time_local = datetime.now()
    year_string = "%s:" % now_time_utc.year
    last_year_string = "%s:" % (now_time_utc.year-1)
    next_year_string = "%s:" % (now_time_utc.year+1)

    load_name = find_the_load(now_time_utc.strftime("%Y:%j:%H:%M:%S"))

    if load_name is None:
        if old_load_name == "":
            raise RuntimeError("Cannot find any load!!")
        # Fallback so we don't crash
        load_name = old_load_name

    load_year = "20%s" % load_name[-3:-1]
    load_dir = load_name[:-1]

    # HTML header stuff

    lr_link = "http://cxc.cfa.harvard.edu/acis/lr_texts/%s/%s_lr.html" % (load_year, load_name)

    header = ['<?xml version="1.0" encoding="UTF-8">',
              '<!DOCTYPE html PUBLIC "-//W3C/DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
              '<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">',
              '<head>\n<meta http-equiv="refresh" content="30" />',
              '<title>Current ACIS Load Real-Time</title>',
              '<link href="lr_web.css" rel="stylesheet" type="text/css">\n</head>',
              '<body text="#000000" bgcolor="#ffffff" link="#ff0000" vlink="#ffff22" alink="#7500FF">\n<pre>',
              '<h1><font face="times">Current ACIS Load Real-Time</font></h1>',
              "<a name=\"review\"><h2><font face=\"times\">Load Commands</font></h2></a>",
              "<font face=\"times\">This is the <a href=\"%s\"><font style=\"color:blue\">%s</font></a> load.</font>" % (lr_link, load_name),
              " ", " "]

    begin_time = now_time_utc - timedelta(days=1)
    end_time = begin_time + timedelta(days=2)

    begin_time_str = begin_time.strftime("%Y:%j:%H:%M:%S")
    end_time_str = end_time.strftime("%Y:%j:%H:%M:%S")

    cmds = commands.get_cmds(begin_time_str, end_time_str)
    cmds.fetch_params()

    comms = None

    outlines = process_commands(now_time_utc, now_time_local, cmds, comms)

    """
    tl_ts = os.path.getmtime("/data/acis/eng_plots/acis_eng_10day.tl")
    dea_tl_ts = os.path.getmtime("/data/acis/eng_plots/acis_dea_10day.tl")
    if tl_ts != last_tl_ts:
        lr = acispy.ACISLoadReview(load_dir, get_msids=True,
                                   tl_file="/data/acis/eng_plots/acis_eng_10day.tl")
        lr.get_updated_dsn_comms()
        last_tl_ts = tl_ts
    if dea_tl_data is None or dea_tl_ts != last_dea_tl_ts:
        # We subtract a day off to make sure we actually get some telemetry
        tl_tbegin = secs2date(date2secs(lr.first_time)-86400.0)
        tl_tend = lr.last_time
        try:
            dea_tl_data = acispy.TracelogData("/data/acis/eng_plots/acis_dea_10day.tl",
                                              tbegin=tl_tbegin, tend=tl_tend)
            last_dea_tl_ts = dea_tl_ts
        except:
            pass

    tnow = now_time_utc.strftime("%Y:%j:%H:%M:%S")

    tbegin = secs2date(max(date2secs(tnow)-3600.0*24.0, date2secs(lr.first_time)))
    tend = secs2date(min(date2secs(tnow)+3600.0*24.0, date2secs(lr.last_time)))

    for temp in ["fptemp_11", "1dpamzt", "1deamzt", "1pdeaat", "tmp_fep1_mong", 
                 "tmp_fep1_actel", "tmp_bep_pcb"]:
        fields = [("model", temp), ("msids", temp)]
        dp = acispy.DatePlot(ds, fields, field2="pitch", color=["blue", "red"],
                             annotations=["belts", "sim_trans", "comms", "perigee", "cti_runs"],
                             tbegin=tbegin, tend=tend, figsize=(10,10), ymin=plot_limits[temp][0],
                             ymax=plot_limits[temp][1])
        dp.add_vline(tnow, lw=3)
        title_str = "%s\nCurrent %s prediction: %g $\mathrm{^\circ{C}}$\nCurrent pitch: %g degrees"
        title_str %= (tnow, temp.upper(), ds["model", temp][tnow].value,
                      ds["pitch"][tnow].value)
        title_str += "\nCurrent instrument: %s, Current ObsID: %d" % (ds["states", "instrument"][tnow],
                                                                      ds["states", "obsid"][tnow])
        if temp == "fptemp_11":
            dp.annotate_obsids(-111.5, ywidth=1.0, color='dodgerblue',
                               txtheight=0.25, txtloc=0.1, fontsize=12)
            dp.add_hline(fp_limits["acis_i"], color='purple')
            dp.add_hline(fp_limits["acis_s"], color='blue')
            dp.add_hline(fp_limits["fp_sens"], color='red')
        else:
            dp.add_hline(planning_limits[temp], color='g')
            dp.add_hline(yellow_limits[temp], color='gold')
            dp.add_hline(red_limits[temp], color='r')
        if temp.startswith("tmp_"):
            dp.add_hline(low_planning_limits[temp], color='g')
            dp.add_hline(low_yellow_limits[temp], color='gold')
            dp.add_hline(low_red_limits[temp], color='r')
        dp.set_title(title_str)
        dp.fig.subplots_adjust(right=0.8)
        dp.savefig(os.path.join(outdir, "current_%s.png" % temp))

    w1, h1 = dp.fig.get_size_inches()

    ccd = acispy.DatePlot(ds, "ccd_count", field2=("states","simpos"), tbegin=tbegin, 
                          tend=tend, color="blue",
                          annotations=["belts", "sim_trans", "comms", "perigee", "cti_runs"],
                          figsize=(10,8))
    ccd.add_vline(tnow, lw=3)
    title_str = "%s\nCurrent CCD count: %d\nCurrent SIM-Z: %g" % (tnow, ds["ccd_count"][tnow].value,
                                                                  ds["states","simpos"][tnow].value)
    ccd.set_title(title_str)

    w2, h2 = ccd.fig.get_size_inches()
    lm = dp.fig.subplotpars.left*w1/w2
    rm = dp.fig.subplotpars.right*w1/w2
    ccd.fig.subplots_adjust(left=lm, right=rm)
    ccd.savefig(os.path.join(outdir, "current_ccd.png"))

    roll = acispy.DatePlot(ds, "off_nominal_roll", field2="grating", tbegin=tbegin,
                           tend=tend, color="blue", ymin=-20.0, ymax=20.0,
                           annotations=["belts", "sim_trans", "comms", "perigee", "cti_runs"],
                           figsize=(10,8), ymin2=-0.5, ymax2=2.5)
    roll.add_vline(tnow, lw=3)
    title_str = "%s\nCurrent Off-nominal roll: %4.3f degree\nGrating: %s" % (tnow,
                                                                             ds["off_nominal_roll"][tnow].value,
                                                                             ds["grating"][tnow])
    roll.set_title(title_str)

    w3, h3 = roll.fig.get_size_inches()
    lm = dp.fig.subplotpars.left*w1/w2
    rm = dp.fig.subplotpars.right*w1/w2
    roll.fig.subplots_adjust(left=lm, right=rm)
    roll.savefig(os.path.join(outdir, "current_roll.png"))

    plots = ["fptemp_11", "1dpamzt", "1deamzt", "1pdeaat", "ccd", "roll", 
             "tmp_fep1_mong", "tmp_fep1_actel", "tmp_bep_pcb"]

    plt.close("all")
    """
    tm_link = "http://cxc.cfa.harvard.edu/acis/Thermal/%s/%s.html" % (load_year, load_dir)
    footer = ["<a name=\"plots\"><h2><font face=\"times\">Temperature Models</font></h2></a>",
              "<a href=\"%s\"><font face=\"times\" color=\"blue\">Full thermal models for %s</font></a>" % (tm_link, load_name)]

    """
    for fig in plots:
        footer.append("<img src=\"current_%s.png\" />" % fig)
        footer.append("<p />")
    """

    f = open(outfile, "w")
    f.write("\n".join(header+outlines+footer))
    f.close()

    if not os.path.exists(cssfile):
        f = open(cssfile, "w")
        f.write("\n".join(lr_web_css))
        f.close()
