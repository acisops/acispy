#!/usr/bin/env python

from datetime import datetime, timedelta
import os
import matplotlib
matplotlib.use("agg")
import acispy
import matplotlib.pyplot as plt
from Chandra.Time import date2secs, secs2date, DateTime
import argparse
from kadi import events

lr_web_css = [
    "commline {",
    "    background-color: #26DDCC;",
    "}\n",
    "obsidline {",
    "    background-color: pink;",
    "}\n",
    "padtime {",
    "    background-color: yellow;",
    "}\n",
    "errline {",
    "    background-color: #E0E0E0;",
    "    color: firebrick;",
    "}\n",
    "mechline {",
    "    background-color: orange;",
    "}"
]

load_root = "/data/acis/LoadReviews"
review_file = "ACIS-LoadReview.txt"

plot_limits = {"fptemp_11": (-120.0, -110.0),
               "1deamzt": (5.0, 42.0),
               "1dpamzt": (5.0, 42.0),
               "1pdeaat": (15.0, 63.0),
               "tmp_fep1_mong": (5.0, 55.0),
               "tmp_fep1_actel": (5.0, 54.0),
               "tmp_bep_pcb": (5.0, 50.0)}

planning_limits = {"1deamzt": 35.5,
                   "1dpamzt": 35.5,
                   "1pdeaat": 52.5,
                   "tmp_fep1_mong": 47.0,
                   "tmp_fep1_actel": 46.0,
                   "tmp_bep_pcb": 42.0}
yellow_limits = {"1deamzt": 37.5,
                 "1dpamzt": 37.5,
                 "1pdeaat": 57.0,
                 "tmp_fep1_mong": 49.0,
                 "tmp_fep1_actel": 48.0,
                 "tmp_bep_pcb": 44.0}
red_limits = {"1deamzt": 40.5,
              "1dpamzt": 40.5,
              "1pdeaat": 62.0,
              "tmp_fep1_mong": 54.0,
              "tmp_fep1_actel": 53.0,
              "tmp_bep_pcb": 49.0}

fp_limits = {"acis_i": -114.0, 
             "acis_s": -112.0,
             "fp_sens": -118.7}

def find_the_load(now_time_utc):

    t = DateTime(now_time_utc).secs

    ls = events.load_segments.filter(start=t, stop=t+300.0)

    if len(ls) > 0:
        return ls[0].load_name
    else:
        return None

def process_load(lr):

    obsid_link = "https://icxc.harvard.edu/cgi-bin/mp/target_param.cgi?"

    outlines = []

    inScience = False
    radzone = lr.begin_radzone

    for i, line in enumerate(lr.lines):

        a_line = line.strip()
        words = a_line.split()

        # Pad lines so highlighting happens across the page
        if len(a_line) < 74:
            the_pad = ' '*(74 - len(a_line))
            a_line = a_line + the_pad

        # Color obsid changes pink
        if "MP_OBSID" in a_line:
            if int(words[-1]) < 40000:
                obsid = "<a href=\"%s%s\"><font color=\"blue\">%s</font></a>" % (obsid_link, words[-1], words[-1])
                a_line = "%s    %s  MP_OBSID    %s                       " % (words[0], words[1], obsid)
            a_line = "<obsidline>%s</obsidline>" % a_line

        # Highlight radmon entry/exit, triplet, first ascending ACIS stop science
        if "COMMAND_SW" in a_line and "OORMP" in a_line:
            a_line = "<padtime>%s</padtime>" % a_line
            if "OORMPDS" in a_line:
                radzone += 1
            else:
                radzone = 0

        if radzone != 0:
            if radzone == 1 and inScience and "AA00000000" in a_line:
                # Looking for descending stop science?
                radzone += 1
            elif radzone == 2 and ("AA00000000" in a_line or
                                   "WSVIDALLDN" in a_line or 
                                   "RS_0000001" in a_line):
                a_line = "<padtime>%s</padtime>" % a_line
                if "RS_0000001" in a_line:
                    # radzone state 3 - look for ascend ACIS cmd
                    radzone += 1
            elif radzone == 2 and "POINT" in a_line and "EPERIGEE" in a_line:
                # Missing triplet
                radzone += 1
            elif radzone == 3 and "ACISPKT" in a_line:
                # first asc CTI ACIS cmd?
                a_line = "<padtime>%s</padtime>" % a_line
                radzone += 1

        # Start science
        if not inScience and "Z0000005" in a_line:
            inScience = True

        # Stop science
        if inScience and "AA00000000" in a_line:
            inScience = False

        # Highlight comms in blue
        if "REAL-TIME COMM" in a_line:
            a_line = "<commline>%s</commline>" % a_line

        # Mechanical motions
        if "COMMAND_SW" in a_line and "ETG" in a_line or "SIMTRANS" in a_line:
            a_line = "<mechline>%s</mechline>" % a_line

        outlines.append(a_line)
        outlines.append(" ")

    outlines += ["</pre>", "</body>"]

    return outlines

parser = argparse.ArgumentParser(description='Run script for the "ACIS Current Load Real-Time" page.')
parser.add_argument("--page_path", type=str, default="/data/wdocs/jzuhone/current_acis_load.html",
                    help='The file to write the page to.')
args = parser.parse_args()

outfile = os.path.abspath(args.page_path)
outdir = os.path.dirname(outfile)
cssfile = os.path.join(outdir, "lr_web.css")

find_load = True
lr = None
dea_tl_data = None
last_tl_ts = 0.0
last_dea_tl_ts = 0.0
load_name = ""
old_load_name = ""

while True:

    # Find the current time
    now_time_utc = datetime.utcnow()
    now_time_local = datetime.now()
    year_string = "%s:" % now_time_utc.year
    last_year_string = "%s:" % (now_time_utc.year-1)
    next_year_string = "%s:" % (now_time_utc.year+1)

    load_name = find_the_load(now_time_utc.strftime("%Y:%j:%H:%M:%S"))

    if load_name is None:
        if old_load_name == "":
            raise RuntimeError("Cannot find initial load!!")
        # Fallback so we don't crash
        load_name = old_load_name

    load_year = "20%s" % load_name[-3:-1]
    load_dir = load_name[:-1]

    if load_name != old_load_name or find_load:
        lr = acispy.ACISLoadReview(load_dir, get_msids=True,
                                   tl_file="/data/acis/eng_plots/acis_eng_10day.tl")
        lr.get_updated_dsn_comms()
        outlines = process_load(lr)
        find_load = False
        old_load_name = load_name

    find_time = True

    # HTML header stuff

    header = ['<?xml version="1.0" encoding="UTF-8">',
              '<!DOCTYPE html PUBLIC "-//W3C/DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
              '<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">',
              '<head>\n<meta http-equiv="refresh" content="30" />',
              '<title>Current ACIS Load Real-Time</title>',
              '<link href="lr_web.css" rel="stylesheet" type="text/css">\n</head>',
              '<body text="#000000" bgcolor="#ffffff" link="#ff0000" vlink="#ffff22" alink="#7500FF">\n<pre>',
              '<h1><font face="times">Current ACIS Load Real-Time</font></h1>',
              "<a name=\"review\"><h2><font face=\"times\">Load Commands</font></h2></a>",
              "<font face=\"times\">This is the <a href=\"http://cxc.cfa.harvard.edu/acis/lr_texts/2017/%s_lr.html\"><font style=\"color:blue\">%s</font></a> load.</font>" % (load_name, load_name),
              " ", " "]

    load_start = datetime.strptime(lr.first_time[:-4], "%Y:%j:%H:%M:%S")
    load_end = datetime.strptime(lr.last_time[:-4], "%Y:%j:%H:%M:%S")
    the_time = now_time_utc - timedelta(days=2)
    begin_time = max(now_time_utc - timedelta(days=1), load_start)
    end_time = min(begin_time + timedelta(days=2), load_end)

    newlines = []

    find_time = True

    for i, outline in enumerate(outlines):
        # Now check for the current time
        if year_string in outline or next_year_string in outline:
            idx = outline.find(year_string)
            if idx < 0:
                idx = outline.find(next_year_string)
            the_time = datetime.strptime(outline[idx:idx+17], "%Y:%j:%H:%M:%S")
            if the_time > now_time_utc and find_time:
                new_line = '<a name="now"></a>NOW: %s (%s)' % (now_time_utc.strftime("%Y:%j:%H:%M:%S"),
                                                               now_time_local.strftime("%D %H:%M:%S"))
                new_line += ' '*(92 - len(new_line))
                new_line = '<font style="background-color:#5AC831"><b>%s</b></font>\n' % new_line
                newlines.append(new_line)
                find_time = False
        if the_time >= begin_time and the_time <= end_time:
             newlines.append(outline.strip())

    if find_time:
        # Need to determine the load again because we ran out
        find_load = True
        lr = None
        dea_tl_data = None
    else:
        tl_ts = os.path.getmtime("/data/acis/eng_plots/acis_eng_10day.tl")
        dea_tl_ts = os.path.getmtime("/data/acis/eng_plots/acis_dea_10day.tl")
        if tl_ts != last_tl_ts:
            lr = acispy.ACISLoadReview(load_dir, get_msids=True,
                                       tl_file="/data/acis/eng_plots/acis_eng_10day.tl")
            lr.get_updated_dsn_comms()
            last_tl_ts = tl_ts
        if dea_tl_data is None or dea_tl_ts != last_dea_tl_ts:
            # We subtract a day off to make sure we actually get some telemetry
            tl_tbegin = secs2date(date2secs(lr.first_time)-86400.0)
            tl_tend = lr.last_time
            dea_tl_data = acispy.TracelogData("/data/acis/eng_plots/acis_dea_10day.tl",
                                              tbegin=tl_tbegin, tend=tl_tend)
            last_dea_tl_ts = dea_tl_ts

        tnow = now_time_utc.strftime("%Y:%j:%H:%M:%S")

        tbegin = secs2date(max(date2secs(tnow)-3600.0*24.0, date2secs(lr.first_time)))
        tend = secs2date(min(date2secs(tnow)+3600.0*24.0, date2secs(lr.last_time)))

        for temp in ["fptemp_11", "1dpamzt", "1deamzt", "1pdeaat"]:
            fields = [("model", temp)]
            if temp != "fptemp_11":
                fields.append(("msids", temp))
            dp = lr.plot(fields, field2="pitch", color=["blue", "red"],
                         annotations=["belts", "sim_trans", "comms", "perigee", "cti_runs"],
                         tbegin=tbegin, tend=tend, figsize=(10,8), ymin=plot_limits[temp][0],
                         ymax=plot_limits[temp][1])
            dp.add_vline(tnow, lw=3)
            title_str = "%s\nCurrent %s prediction: %g $\mathrm{^\circ{C}}$\nCurrent pitch: %g degrees"
            title_str = title_str % (tnow, temp.upper(), 
                                     lr.ds["model", temp][tnow].value, 
                                     lr.ds["pitch"][tnow].value)
            if temp != "fptemp_11":
                dp.add_hline(planning_limits[temp], color='g')
                dp.add_hline(yellow_limits[temp], color='gold')
                dp.add_hline(red_limits[temp], color='r')
            else:
                title_str += "\nCurrent instrument: %s" % lr.ds["states", "instrument"][tnow]
                dp_fp = acispy.DatePlot(dea_tl_data, "fptemp_11", color='red', plot=dp)
                dp_fp.set_ylim(*plot_limits[temp])
                dp_fp.add_hline(fp_limits["acis_i"], color='purple')
                dp_fp.add_hline(fp_limits["acis_s"], color='blue')
                dp_fp.add_hline(fp_limits["fp_sens"], color='red')
            dp.set_title(title_str)
            dp.fig.subplots_adjust(right=0.8)
            dp.savefig(os.path.join(outdir, "current_%s.png" % temp))

        w1, h1 = dp.fig.get_size_inches()

        ccd = lr.plot("ccd_count", field2=("states","simpos"), tbegin=tbegin, tend=tend, color="blue",
                      annotations=["belts", "sim_trans", "comms", "perigee", "cti_runs"],
                      figsize=(10,8))
        ccd.add_vline(tnow, lw=3)
        title_str = "%s\nCurrent CCD count: %d\nCurrent SIM-Z: %g" % (tnow, lr.ds["ccd_count"][tnow].value,
                                                                      lr.ds["states","simpos"][tnow].value)
        ccd.set_title(title_str)

        w2, h2 = ccd.fig.get_size_inches()
        lm = dp.fig.subplotpars.left*w1/w2
        rm = dp.fig.subplotpars.right*w1/w2
        ccd.fig.subplots_adjust(left=lm, right=rm)
        ccd.savefig(os.path.join(outdir, "current_ccd.png"))

        roll = lr.plot("off_nominal_roll", field2="grating", tbegin=tbegin, tend=tend, color="blue",
                       ymin=-20.0, ymax=20.0, annotations=["belts", "sim_trans", "comms", "perigee", "cti_runs"],
                       figsize=(10,8))
        roll.add_vline(tnow, lw=3)
        title_str = "%s\nCurrent Off-nominal roll: %4.3f degree\nGrating: %s" % (tnow, 
                                                                                 lr.ds["off_nominal_roll"][tnow].value,
                                                                                 lr.ds["grating"][tnow])
        roll.set_title(title_str)

        w3, h3 = roll.fig.get_size_inches()
        lm = dp.fig.subplotpars.left*w1/w2
        rm = dp.fig.subplotpars.right*w1/w2
        roll.fig.subplots_adjust(left=lm, right=rm)
        roll.savefig(os.path.join(outdir, "current_roll.png"))

        plots = ["fptemp_11", "1dpamzt", "1deamzt", "1pdeaat", "ccd", "roll"]

        if ('model', 'tmp_fep1_mong') in lr.ds.field_list:

            plots += ["tmp_fep1_mong", "tmp_fep1_actel", "tmp_bep_pcb"]

            for temp in ["tmp_fep1_mong", "tmp_fep1_actel", "tmp_bep_pcb"]:
                dp = lr.plot(("model", temp), field2="pitch", color="blue",
                             annotations=["belts", "sim_trans", "comms", "perigee", "cti_runs"],
                             tbegin=tbegin, tend=tend, figsize=(10,8), ymin=plot_limits[temp][0],
                             ymax=plot_limits[temp][1])
                dp.add_vline(tnow, lw=3)
                title_str = "%s\nCurrent %s prediction: %g $\mathrm{^\circ{C}}$\nCurrent pitch: %g degrees"
                dp.set_title(title_str % (tnow, temp.upper(), lr.ds["model", temp][tnow].value, lr.ds["pitch"][tnow].value))
                dp.add_hline(planning_limits[temp], color='g')
                dp.add_hline(yellow_limits[temp], color='gold')
                dp.add_hline(red_limits[temp], color='r')
                dpt = acispy.DatePlot(dea_tl_data, ("msids", temp), color='red', plot=dp)
                dpt.set_ylim(*plot_limits[temp])
                dp.fig.subplots_adjust(right=0.8)
                dp.savefig(os.path.join(outdir, "current_%s.png" % temp))

        plt.close("all")

        footer = ["<a name=\"plots\"><h2><font face=\"times\">Temperature Models</font></h2></a>",
                  "<a href=\"http://cxc.cfa.harvard.edu/acis/Thermal/%s/%s.html\"><font face=\"times\" color=\"blue\">Full thermal models for %s</font></a>" % (load_year, load_dir, load_name)]

        for fig in plots:
            footer.append("<img src=\"current_%s.png\" />" % fig)
            footer.append("<p />")

        f = open(outfile, "w")
        f.write("\n".join(header+newlines+footer))
        f.close()

        if not os.path.exists(cssfile):
            f = open(cssfile, "w")
            f.write("\n".join(lr_web_css))
            f.close()
