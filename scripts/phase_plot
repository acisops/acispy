#!/usr/bin/env python

import matplotlib
matplotlib.use("qt4agg")
import matplotlib.pyplot as plt
import argparse
import acispy
from acispy.utils import state_labels

parser = argparse.ArgumentParser(description='Make a phase plot of one MSID or state versus another within a certain time frame.')
parser.add_argument("tstart", type=str, help='The start time in YYYY:DOY:HH:MM:SS format')
parser.add_argument("tstop", type=str, help='The stop time in YYYY:DOY:HH:MM:SS format')
parser.add_argument("x_field", type=str, help='The MSID or state to plot on the x-axis')
parser.add_argument("y_field", type=str, help='The MSID or state to plot on the y-axis')
args = parser.parse_args()

msids = []
states = []

if args.x_field in state_labels:
    x_field = ("states", args.x_field)
    states.append(args.x_field)
else:
    msids.append(args.x_field)
    x_field = ("msids", args.x_field)

if args.y_field in state_labels:
    y_field = ("states", args.y_field)
    states.append(args.y_field)
else:
    msids.append(args.y_field)
    y_field = ("msids", args.y_field)

dc = acispy.DataContainer.fetch_from_database(args.tstart, args.tstop,
                                              msid_keys=msids, state_keys=states,
                                              interpolate_msids=True, filter_bad=True)

if x_field[0] == "states" and y_field[0] != "states":
    dc.map_state_to_msid(x_field[1], y_field[1])
    x_field = ("msids", x_field[1])
elif x_field[0] != "states" and y_field[0] == "states":
    dc.map_state_to_msid(y_field[1], x_field[1])
    y_field = ("msids", y_field[1])

pp = acispy.PhasePlot(dc, x_field, y_field)
plt.show()